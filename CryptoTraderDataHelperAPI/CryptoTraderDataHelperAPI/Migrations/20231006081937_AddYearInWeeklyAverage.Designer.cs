// <auto-generated />
using System;
using CryptoTraderDataHelperAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoTraderDataHelperAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231006081937_AddYearInWeeklyAverage")]
    partial class AddYearInWeeklyAverage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-rc.1.23419.6");

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.DailyAverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("SymbolId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.ToTable("DailyAverages");
                });

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.MinutelyAverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("SymbolId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.ToTable("MinutelyAverages");
                });

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.Symbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DailyAverageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinutelyAverageId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("SymbolId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeeklyAverageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DailyAverageId");

                    b.HasIndex("MinutelyAverageId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("WeeklyAverageId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.WeeklyAverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("SymbolId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.ToTable("WeeklyAverages");
                });

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.DailyAverage", b =>
                {
                    b.HasOne("CryptoTraderDataHelperAPI.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.MinutelyAverage", b =>
                {
                    b.HasOne("CryptoTraderDataHelperAPI.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.Trade", b =>
                {
                    b.HasOne("CryptoTraderDataHelperAPI.Models.DailyAverage", "DailyAverage")
                        .WithMany()
                        .HasForeignKey("DailyAverageId");

                    b.HasOne("CryptoTraderDataHelperAPI.Models.MinutelyAverage", "MinutelyAverage")
                        .WithMany()
                        .HasForeignKey("MinutelyAverageId");

                    b.HasOne("CryptoTraderDataHelperAPI.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoTraderDataHelperAPI.Models.WeeklyAverage", "WeeklyAverage")
                        .WithMany()
                        .HasForeignKey("WeeklyAverageId");

                    b.Navigation("DailyAverage");

                    b.Navigation("MinutelyAverage");

                    b.Navigation("Symbol");

                    b.Navigation("WeeklyAverage");
                });

            modelBuilder.Entity("CryptoTraderDataHelperAPI.Models.WeeklyAverage", b =>
                {
                    b.HasOne("CryptoTraderDataHelperAPI.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });
#pragma warning restore 612, 618
        }
    }
}
